@using Sandbox;
@using Sandbox.UI;

@inherits Panel
@namespace HC2

<root class="row gap-huge">
    <div class="column">
        <div class="column gap" style="width: 256px;">


            @if (!IsPause)
            {
                <div class="button with-icon" onclick=@CreateCharacterButton>
                    <label>New Character</label>
                    <i>add</i>
                </div>
            }

            @if (Characters is not null)
            {
                <div class="column gap with-padding-vertical">

                    @foreach (var character in Characters)
                    {
                        <div class="button" onclick=@(() => SelectCharacter(character))>@character.Name</div>
                    }
                </div>
            }

            @if (!IsModal)
            {
                <a class="button" href="/">Return</a>
            }
        </div>
    </div>

    @if (CharacterSave.Current is null)
    {
        <div class="column gap" style="width: 256px;">
            <TextEntry class="text-entry" Value:bind=@NewCharacterName />
            <div class="button" onclick="@CreateNewCharacter">Create Character</div>
        </div>
    }
</root>

@code
{
    List<CharacterSave> Characters = new();

    public System.Action OnSelect { get; set; }
    string NewCharacterName { get; set; }

    bool IsModal { get; set; }
    bool IsPause { get; set; }

    void SelectCharacter(CharacterSave character)
    {
        if (IsPause)
        {
            Player.Local?.Kill();
            CharacterSave.Current = character;
        }
        else
        {
            CharacterSave.Current = character;
            OnSelect?.Invoke();
        }
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        IsPause = MenuRoot.Instance.IsPauseMenu;

        var chars = CharacterSave.GetAll();
        if (chars.Count != Characters.Count)
        {
            Characters = chars;
            CharacterSave.Current = Characters.FirstOrDefault();
        }
    }

    void CreateCharacterButton()
    {
        CharacterSave.Current = null;
        NewCharacterName = "Adventurer";
    }

    void CreateNewCharacter()
    {
        var character = new CharacterSave();
        character.Name = NewCharacterName;
        character.Save();

    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine(Characters?.Count, CharacterSave.Current);
    }
}
