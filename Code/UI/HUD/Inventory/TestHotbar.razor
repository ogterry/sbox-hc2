@using System
@using Sandbox
@using Sandbox.UI
@using HC2
@attribute [StyleSheet]

@inherits Panel

@{
    if (!Hotbar.IsValid()) return;
}

<root class="@(InventoryOpen ? "visible" : "")">
    <div class="inventory">
        @for (var i = 0; i < Inventory.MaxSlots; i++)
        {
            var item = Inventory.GetItemInSlot(i);
            <ItemSlot Item=@item Inventory=@Inventory SlotIndex=@i />
        }
    </div>

    <div class="container">
        @for (var i = 0; i < Hotbar.MaxSlots; i++)
        {
            var item = Hotbar.GetItemInSlot(i);
            <ItemSlot class="@(Hotbar.SelectedSlot == i ? "active" : "")" Item=@item Inventory=@Hotbar SlotIndex=@i />
        }
    </div>
</root>

@code
{
    public Hotbar Hotbar => Player.Local?.Hotbar;
    public Inventory Inventory => Player.Local?.Inventory;

    bool InventoryOpen { get; set; }

    bool IsDragging { get; set; }
    bool WantsToDrag { get; set; }
    Vector2 StartMousePos { get; set; }

    /// <summary>
    /// The current hovered slot we'll use to do stuff with
    /// </summary>
    public static ItemSlot HoveredSlot { get; set; }

    ItemSlot DraggingItem { get; set; }

    public DummyItem Dummy { get; set; }

    protected override void OnMouseDown( MousePanelEvent e )
    {
        if (e.MouseButton == MouseButtons.Left)
        {
            IsDragging = false;
            WantsToDrag = true;
            StartMousePos = Mouse.Position / Screen.Size;
        }
    }

    protected override void OnMouseUp(MousePanelEvent e)
    {
        if (e.MouseButton == MouseButtons.Left)
        {
            var mousePos = Mouse.Position / Screen.Size;

            StopDragging();
        }

        if ( e.MouseButton == MouseButtons.Right )
        {
            TryDropHoveredItem();
        }
    }

    void TryDropHoveredItem()
    {
        if (!HoveredSlot.IsValid())
            return;

        if (HoveredSlot.Item is null)
            return;

        if (HoveredSlot.Item.Resource is null)
            return;

        HoveredSlot.Inventory.DropItem(HoveredSlot.SlotIndex);
    }

    void StartDragging()
    {
        if (IsDragging)
            return;

        DraggingItem = HoveredSlot;

        if (!DraggingItem.IsValid())
            return;

        if ( DraggingItem.Item is null )
            return;

        if ( DraggingItem.Item.Resource is null )
            return;

        IsDragging = true;

        Dummy = new DummyItem()
        {
            Resource = DraggingItem.Item.Resource
        };

        DraggingItem.SetClass("being-dragged", true);

        SetClass("dragging-active", true);

        AddChild( Dummy );

        Log.Info($"Started dragging {DraggingItem}");
    }

    void StopDragging()
    {
        IsDragging = false;
        WantsToDrag = false;

        var item = DraggingItem;

        if (item.IsValid())
        {
            item.SetClass("being-dragged", false);
        }

        DraggingItem = null;

        SetClass( "dragging-active", false );

        Log.Info( $"Stop dragging {item}" );

        if ( !Dummy.IsValid() )
            return;

        Dummy.Delete( true );

        if ( HoveredSlot == null )
            return;

        if (!item.IsValid())
            return;

        var slotA = item;
        var slotB = HoveredSlot;

        slotB.Inventory.MoveItem(slotA.Item, slotB.SlotIndex);
    }

    public override void Tick()
    {
        if (Input.Pressed("Score"))
        {
            InventoryOpen = !InventoryOpen;
        }

        if (InventoryOpen)
        {
            var mousePos = Mouse.Position / Screen.Size;

            if (DraggingItem is null && IsDragging)
            {
                StopDragging();
                return;
            }

            // Have we moved a little, and are not dragging already?
            if (mousePos.Distance(StartMousePos) > .005 && WantsToDrag)
                StartDragging();
        }
    }

    protected override int BuildHash()
    {
        var hc = new HashCode();

        hc.Add(InventoryOpen);

        if (!Hotbar.IsValid()) return hc.ToHashCode();

        hc.Add(Hotbar.SelectedSlot);

        var hotbar = Hotbar;
        hc.Add(hotbar);

        if (hotbar.IsValid())
        {
            foreach (var item in hotbar.GetAllItems())
            {
                hc.Add(item);
                hc.Add(item.Amount);
            }
        }

        var inventory = Inventory;
        hc.Add(inventory);

        if (inventory.IsValid())
        {
            foreach (var item in inventory.GetAllItems())
            {
                hc.Add(item);
                hc.Add(item.Amount);
            }
        }



        return hc.ToHashCode();
    }
}
